/**
 * reset.css by Swen Gorschewski
 * based on Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
 * http://cssreset.com
 */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, menu, nav, output, ruby, section, summary, time, mark, audio, video, input, textarea, button {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, footer, header, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

button {
  cursor: pointer;
  color: inherit;
  background-color: inherit;
  font: inherit;
  padding: 0;
  margin: 0;
  border: none; }

::-webkit-input-placeholder {
  line-height: normal; }

.group:after {
  content: "";
  display: table;
  clear: both; }

body {
  font-family: 'Lora', serif; }

h1 {
  font-size: 1.3em;
  margin-bottom: 1em; }

h2 {
  font-size: 1.1em;
  margin-bottom: 1em; }

p {
  line-height: 1.5em;
  margin-bottom: 1.5em; }
  p:last-child {
    margin-bottom: 0; }

/* 
 *	Place the scss code for dom states here
 */

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5jc3MiLCIvc291cmNlL2Jhc2UvX3Jlc2V0LnNjc3MiLCIvc291cmNlL2Jhc2UvX2Jhc2Uuc2NzcyIsIi9zb3VyY2UvbW9kdWxlcy9fdHlwby5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0lBSUc7QUNDZ1A7RUFhbFAsV0FBUTtFQUNDLFlBQUE7RUFDVCxXQUFRO0VBQ1IsaUJBQVc7RUFDTCxlQUFBO0VBQ1UsMEJBQUE7RUFDaEIsZ0NBQVk7S0FBWiw2QkFBWTtVQUFaLHdCQUFZLEVBQUE7O0FEVmIsa0RBQWlEO0FDYUk7RUFFcEQsZ0JBQVMsRUFBQTs7QUFFVjtFQUNDLGdCQUFhLEVBQUE7O0FBRWQ7RUFDYSxrQkFBQSxFQUFBOztBQUVEO0VBQ1gsY0FBUSxFQUFBOztBQUVzQztFQUVyQyxhQUFBO0VBQ1QsZUFBUyxFQUFBOztBQUVWO0VBQ0MsMkJBQWlCO0VBQ2pCLG1CQUFnQixFQUFBOztBQUVqQjtFQUNDLGlCQUFRO0VBQ1IsZ0JBQU87RUFDVywyQkFBQTtFQUNsQixlQUFNO0VBQ04sWUFBUztFQUNELFdBQUE7RUFDUixjQUFRLEVBQUE7O0FBRVQ7RUFDQyxxQkFBYSxFQUFBOztBQzNDZDtFQUNVLGFBQUE7RUFDVCxnQkFBUztFQUNULGFBQU8sRUFBQTs7QUNuQlI7RUFDRSw0QkFBYSxFQUFBOztBQUdmO0VBQ0Usa0JBQVc7RUFDSSxvQkFBQSxFQUFBOztBQUdqQjtFQUNhLGtCQUFBO0VBQ1gsb0JBQWUsRUFBQTs7QUFHakI7RUFDRSxvQkFBYTtFQUNiLHNCQUFlLEVBQUE7RUFFaEI7SUFDRyxrQkFBZSxFQUFBOztBSGtEbkI7O0lBRUciLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmVzZXQuY3NzIGJ5IFN3ZW4gR29yc2NoZXdza2lcbiAqIGJhc2VkIG9uIEVyaWMgTWV5ZXIncyBSZXNldCBDU1MgdjIuMCAoaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8pXG4gKiBodHRwOi8vY3NzcmVzZXQuY29tXG4gKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLCBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCwgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhciwgYiwgdSwgaSwgY2VudGVyLCBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLCBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCwgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsIGFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBmaWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBtZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSwgdGltZSwgbWFyaywgYXVkaW8sIHZpZGVvLCBpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICBmb250LXNpemU6IDEwMCU7XG4gIGZvbnQ6IGluaGVyaXQ7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxOyB9XG5cbm9sLCB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cblxuYmxvY2txdW90ZSwgcSB7XG4gIHF1b3Rlczogbm9uZTsgfVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlciwgcTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbmJ1dHRvbiB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gIGZvbnQ6IGluaGVyaXQ7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgYm9yZGVyOiBub25lOyB9XG5cbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7IH1cblxuLmdyb3VwOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgZGlzcGxheTogdGFibGU7XG4gIGNsZWFyOiBib3RoOyB9XG5cbmJvZHkge1xuICBmb250LWZhbWlseTogJ0xvcmEnLCBzZXJpZjsgfVxuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMS4zZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTsgfVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogMS4xZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTsgfVxuXG5wIHtcbiAgbGluZS1oZWlnaHQ6IDEuNWVtO1xuICBtYXJnaW4tYm90dG9tOiAxLjVlbTsgfVxuICBwOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cblxuLyogXG4gKlx0UGxhY2UgdGhlIHNjc3MgY29kZSBmb3IgZG9tIHN0YXRlcyBoZXJlXG4gKi9cbiIsIi8qKlxuICogcmVzZXQuY3NzIGJ5IFN3ZW4gR29yc2NoZXdza2lcbiAqIGJhc2VkIG9uIEVyaWMgTWV5ZXIncyBSZXNldCBDU1MgdjIuMCAoaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8pXG4gKiBodHRwOi8vY3NzcmVzZXQuY29tXG4gKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbywgaW5wdXQsIHRleHRhcmVhLCBidXR0b24ge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG5cdGJvcmRlcjogMDtcblx0Zm9udC1zaXplOiAxMDAlO1xuXHRmb250OiBpbmhlcml0O1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7ICBcbn1cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxuZm9vdGVyLCBoZWFkZXIsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuYm9keSB7XG5cdGxpbmUtaGVpZ2h0OiAxO1xufVxub2wsIHVsIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn1cbmJsb2NrcXVvdGUsIHEge1xuXHRxdW90ZXM6IG5vbmU7XG59XG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcblx0Y29udGVudDogJyc7XG5cdGNvbnRlbnQ6IG5vbmU7XG59XG50YWJsZSB7XG5cdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5cdGJvcmRlci1zcGFjaW5nOiAwO1xufVxuYnV0dG9uIHtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHRjb2xvcjogaW5oZXJpdDtcblx0YmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcblx0Zm9udDogaW5oZXJpdDtcblx0cGFkZGluZzogMDtcblx0bWFyZ2luOiAwO1xuXHRib3JkZXI6IG5vbmU7XG59XG46Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuXHRsaW5lLWhlaWdodDogbm9ybWFsO1xufSIsIi8vIGJyZWFrIHBvaW50cyBmb3IgZGlmZmVyZW50IHNjcmVlbiBzaXplc1xuJGJyZWFrcG9pbnRfbWVkaXVtOiA0MGVtO1xuJGJyZWFrcG9pbnRfbGFyZ2U6IDYwZW07XG5cbi8vIHByb2plY3QgY29sb3JzXG4kY29sb3JfaGlnaGxpZ2h0OiBwaW5rO1xuJGNvbG9yX2xpZ2h0OiAjRkZGRkZGO1xuJGNvbG9yX2Rhcms6ICMwMDAwMDA7XG5cbiRjb2xvcl9lcnJvcjogcmVkO1xuJGNvbG9yX3N1Y2Nlc3M6IGdyZWVuO1xuXG4vLyBtaXNjXG4kYW5pbWF0aW9uX2R1cmF0aW9uOiAwLjJzO1xuXG4vLyBjbGVhciBmaXhcbi5ncm91cDphZnRlciB7XG5cdGNvbnRlbnQ6IFwiXCI7XG5cdGRpc3BsYXk6IHRhYmxlO1xuXHRjbGVhcjogYm90aDtcbn0iLCJib2R5IHtcbiAgZm9udC1mYW1pbHk6ICdMb3JhJywgc2VyaWY7XG59XG5cbmgxIHtcbiAgZm9udC1zaXplOiAxLjNlbTtcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xufVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogMS4xZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbn1cblxucCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjVlbTtcbiAgbWFyZ2luLWJvdHRvbTogMS41ZW07XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9 */